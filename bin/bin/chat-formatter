#!/usr/bin/env python3

import re
from sys import argv, stdin
from textwrap import dedent
from datetime import datetime, timedelta

try:
    from bs4 import BeautifulSoup
    from bs4.element import NavigableString
except ModuleNotFoundError as err:
    def run_with_venv(venv):
        # pylint: disable = ungrouped-imports, reimported, redefined-outer-name
        import sys
        from os import environ, execv
        from pathlib import Path
        venv_python = Path(environ['PYTHON_VENV_HOME'], 'ir', 'bin', 'python3').expanduser()
        if not venv_python.exists():
            raise FileNotFoundError(' '.join([
                f'tried load module "{err.name}" with venv "{venv}"',
                f'but could not find executable {venv_python}',
            ]))
        execv(str(venv_python), [str(venv_python), *sys.argv])
    run_with_venv('ir')


def _read_all_inputs(files):
    if files:
        result = []
        for file in files:
            with open(file, "r") as fd:
                result.append(fd.read())
        return "".join(result)
    elif not stdin.isatty():
        return stdin.read()
    else:
        return ""


def _extract_text(soup):
    text = []
    for desc in soup.descendants:
        if not hasattr(desc, 'contents'):
            if desc.strip():
                text.append(desc.strip())
        elif str(desc) == '<br/>':
            text.append('<br>')
    return re.sub(r'  \+', ' ', ''.join(text).strip()).replace('<br>', '\n')


def hangout(text):
    time = ""
    speaker = ""
    for line in text.split("\n"):
        line = line.strip()
        if line:
            if re.search("[0-9]+:[0-9]+ [AP]M$", line):
                speaker, time = line.split(" - ")
            else:
                print("({}) {}: {}".format(time, speaker, line))


gchat = hangout


def twitter(text):
    keywords = set(["Reply", "Retweet", "Favorite"])
    lines = [line.strip() for line in text.splitlines() if line]
    while lines[0] in keywords:
        lines = lines[1:]
    for prev_line, line in zip(lines[:-1], lines[1:]):
        if line in keywords and prev_line not in keywords:
            print(prev_line)


def sms(text):
    for line in text.split("\n"):
        print(re.sub("(.*) ([0-9]{1,2}:[0-9]{2} [AP]M)$", r"(\2) \1", line.strip()))


def allo(text):
    year = datetime.now().year
    utterances = []
    soup = BeautifulSoup(text, 'html.parser')
    for tag in soup.find_all((lambda tag: tag.has_attr('aria-describedby'))):
        text_tag = tag.find(id='text')
        if not text_tag:
            continue
        if 'right' in tag['class']:
            speaker = 'Justin'
        else:
            speaker = 'Other'
        date = tag.find('relative-time')
        if date:
            date = date.string.strip().encode("ascii", errors="ignore").decode()
            date = datetime.strptime(str(year) + ' ' + date, '%Y %b %d %I:%M %p').strftime('%Y-%m-%d %H:%M')
        contents = text_tag.string
        match = re.search(r'translate3d\(0px, (-?[0-9]+)px, 0px\);', tag['style'].strip())
        position = int(match.group(1))
        utterances.append((position, date, speaker, contents))
    prev_time = None
    for _, time, speaker, contents in sorted(utterances):
        if not time:
            time = prev_time
        print('({}) {}: {}'.format(time, speaker, contents))
        prev_time = time


def slack(text):
    soup = BeautifulSoup(text, 'html.parser')
    date = None
    speaker = None
    lines = []
    for item in soup.select('.c-virtual_list__item'):
        date_tag = item.select('.c-message_list__day_divider__label')
        if date_tag:
            date = _extract_text(date_tag[0])
            if date == 'Today':
                date = datetime.now()
            elif date == 'Yesterday':
                date = datetime.now() - timedelta(days=1)
            else:
                while date[-1].isalpha():
                    date = date[:-1]
                try:
                    date = datetime.strptime(date + f' {datetime.now().year}', '%A, %B %d %Y')
                except ValueError:
                    date = datetime.strptime(re.sub('[a-z]*,', ',', date), '%B %d, %Y')
        if not item.select('.c-message'):
            continue
        date = date.date()
        header = item.select('.c-message__content_header')
        if header:
            speaker = header[0].select('.c-message__sender')[0].string
            time = header[0].select('.c-timestamp__label')[0].string
        else:
            time = item.select('.c-message__gutter .c-timestamp__label')[0].string
        date = datetime.strptime(
            date.strftime('%Y-%m-%d') + ' ' + time,
            '%Y-%m-%d %I:%M %p',
        )
        body = item.select('.c-message__body')
        if not body:
            body = item.select('.p-rich_text_section')
        if body:
            for text in _extract_text(body[0]).splitlines():
                lines.append((
                    f'({date.isoformat(sep=" ")[:-3]})',
                    f'{speaker}: {text}',
                ))
    print('\n'.join(
        ' '.join(line) for line
        in sorted(lines, key=(lambda line: line[0]))
    ))


def _is_format(string):
    exceptions = 'datetime timedelta dedent'.split()
    return not string.startswith('_') and string == string.lower() and string not in exceptions


def _main():
    formats = dict((k, v) for k, v in globals().items() if callable(v) and _is_format(k))
    if len(argv) < 2 or argv[1] not in formats:
        print(dedent('''
            Usage: chat-formatter <FORMAT> [FILE] ...

            Available formats:
            {}
            '''.rstrip()).format(
                '\n'.join(f'    {f}' for f in sorted(formats.keys()))
            )
        )
        exit(1)
    text = _read_all_inputs(argv[2:]).strip()
    formats[argv[1]](text)


if __name__ == "__main__":
    _main()
