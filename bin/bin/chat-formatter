#!/usr/bin/env python

import re
from sys import argv, stdin
from datetime import datetime


def read_all_inputs(files):
    if files:
        result = []
        for file in files:
            with open(file, "r") as fd:
                result.append(fd.read())
        return "".join(result)
    elif not stdin.isatty():
        return stdin.read()
    else:
        return ""


def hangout(text):
    time = ""
    speaker = ""
    for line in text.split("\n"):
        line = line.strip()
        if line:
            if re.search("[0-9]+:[0-9]+ [AP]M$", line):
                speaker, time = line.split(" - ")
            else:
                print("({}) {}: {}".format(time, speaker, line))


gchat = hangout


def twitter(text):
    keywords = set(["Reply", "Retweet", "Favorite"])
    lines = [line.strip() for line in text.splitlines() if line]
    while lines[0] in keywords:
        lines = lines[1:]
    for prev_line, line in zip(lines[:-1], lines[1:]):
        if line in keywords and prev_line not in keywords:
            print(prev_line)


def sms(text):
    for line in text.split("\n"):
        print(re.sub("(.*) ([0-9]{1,2}:[0-9]{2} [AP]M)$", r"(\2) \1", line.strip()))


def allo(text):
    from bs4 import BeautifulSoup
    from bs4.element import NavigableString
    year = datetime.now().year
    utterances = []
    soup = BeautifulSoup(text, 'html.parser')
    for tag in soup.find_all((lambda tag: tag.has_attr('aria-describedby'))):
        text_tag = tag.find(id='text')
        if not text_tag:
            continue
        if 'right' in tag['class']:
            speaker = 'Justin'
        else:
            speaker = 'Other'
        date = tag.find('relative-time')
        if date:
            date = date.string.strip().encode("ascii", errors="ignore").decode()
            date = datetime.strptime(str(year) + ' ' + date, '%Y %b %d %I:%M %p').strftime('%Y-%m-%d %H:%M')
        contents = text_tag.string
        match = re.search(r'translate3d\(0px, (-[0-9]+)px, 0px\);', tag['style'].strip())
        position = int(match.group(1))
        utterances.append((position, date, speaker, contents))
    prev_time = None
    for _, time, speaker, contents in sorted(utterances):
        if not time:
            time = prev_time
        print('({}) {}: {}'.format(time, speaker, contents))
        prev_time = time


def main():
    exceptions = ("main", "read_all_inputs")
    formats = dict((k, v) for k, v in globals().items() if callable(v) and k not in exceptions)
    if len(argv) < 2 or argv[1] not in formats:
        print("Usage: chat-formatter {} FILE ...".format("|".join(sorted(formats.keys()))))
        exit(1)
    text = read_all_inputs(argv[2:]).strip()
    formats[argv[1]](text)


if __name__ == "__main__":
    main()
